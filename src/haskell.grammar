//TODO: Unicode support 

@precedence {
    conid, ascLarge,
    varid, small,
    varsym, symbol,
    float, integer,
    nl @cut,
    highprec
}

@top Module{
    @specialize<varid, "module"> ModuleName (Exports)? @specialize<varid, "where"> Body |
    Body
}

ModuleName {
    modid
}

//The characters and sets of characters to be ignored when matching the grammar.

@skip {
    whitechar | comment | ncomment
}

// The most basic data types. (to be modified).

literal {
    !integer integer |
    !float float |
    char|
    string
}

// The different types of white characters which may occur in a program. 

whitechar {
    newline |
    vertab |
    space |
    tab |
    uniWhite
}

// The syntax for terminating a line of code and starting a new one

newline {
    !nl return linefeed |
    return |
    linefeed |
    formfeed
}


// The syntax for a comment line

comment {
    dashes (any (any)*)? newline
}

// The syntax for a block of comment lines.
// You should be allowed to have a comment block inside another comment block.

ncomment {
    opencom anyseq (ncomment anyseq)* closecom
}

// The characters which should be allowed in the comment block

anyseq {
    (graphic | whitechar)*
}

tyvar {
    varid
}

tycon {
    conid
}

tycls {
    conid
}

modid {
    !highprec (conid ".")* conid
}

qvarid {
    (modid ".")? varid
}

qconid {
    (modid ".")? conid
}

qtycon {
    (modid ".")? tycon
}

qtycls {
    (modid ".")? tycls
}

qvarsym {
    (modid ".")? !highprec varsym
}

qconsym {
    (modid ".")? !highprec consym
}

octal {
    octit (octit)*
}

hexadecimal {
    hexit (hexit)*
}

integer {
    !integer decimal | "0o" octal | "0O" octal | "0x" hexadecimal | "0X" hexadecimal 
}

float {
    !float decimal "." decimal (exponent)?
}

exponent {
    ("e" | "E") ("+" | "-")? decimal
}

char {
    "\'" (graphic | space | escape) "\'" 
}

string {
    "\"" (graphic | space | escape | gap) "\"" 
}

escape {
    "\\" (charesc | ascii | decimal | "o" octal | "x" hexadecimal)
}

gap {
    "\\" whitechar (whitechar)* "\\"
}

//The general syntax for expressions. Type signature might be included. 

Exp {
    Infixexp (!highprec @specialize<varsym, "::"> (context @specialize<varsym, "=>">)? Type)?
}

// Infix operators application for expressions.

Infixexp {
    Lexp qop Infixexp |
    "-" Infixexp |
    Lexp
}

// Lambda abstraction and expressions introduced by keywords.

Lexp {
    "\\" (Apat)+ @specialize<varsym, "->"> Exp |
    @specialize<varid, "let"> Decls @specialize<varid, "in"> Exp |
    @specialize<varid, "if"> Exp (";")? @specialize<varid, "then"> Exp (";")? @specialize<varid, "else"> Exp |
    @specialize<varid, "case"> Exp @specialize<varid, "of"> "{" Alts "}" |
    @specialize<varid, "do"> "{" Stmts "}" |
    Fexp
}

// Function application for expressions.

Fexp {
    (Fexp)? Aexp
}

// Expressions aplications, such as: sections, lists, tuples, sequences etc.

Aexp {
    qvar |
    gcon |
    literal |
    "(" Exp ")" |
    "(" Exp ("," Exp)+ ")" |
    "[" Exp ("," Exp)? @specialize<varsym, ".."> (Exp)? "]" |
    "[" Exp @specialize<varsym, "|"> qual ("," qual)+ "]" |
    "(" Infixexp qop")" |
    qcon "{}" |
    qcon "{" fbind ("," fbind)* "}" |
    Aexp "{" fbind ("," fbind)* "}"
} 

var {
    varid | "(" varsym ")"
}

qvar {
    qvarid | "(" qvarsym ")"
}

con {
    conid | "(" consym ")"
}

qcon {
    qconid | "(" gconsym ")"
}

varop {
    varsym | "`" varid "`"
}

qvarop {
    qvarsym | "`" qvarid "`"
}

conop {
    consym | "`" conid "`"
}

qconop {
    gconsym | !highprec "`" qconid "`"
}

op {
    varop | conop
}

qop {
    qvarop | qconop
}

gconsym {
    !highprec @specialize<varsym, ":"> | qconsym 
}

// Qualifiers could be either generators, local bindings or boolean guards.

qual {
    Pat @specialize<varsym, "<-"> Exp |
    @specialize<varid, "let"> Decls |
    Exp
}

// List of alternative pattern matches.

Alts {
    Alt (";" Alt)*
}

// Definition of a pattern match. 

Alt {
    Pat @specialize<varsym, "->"> Exp (@specialize<varid,"where"> Decls)? |
    Pat Gdpat (@specialize<varid, "where"> Decls)? |
    ""
}

Gdpat {
    guards @specialize<varsym, "->"> Exp Gdpat?
}

// The list of guards.

guards {
    @specialize<varsym, "|"> guard ("," guard)*
}

// Definition of a guard. Could be a pattern guard, a local binding or
// a boolean guard.

guard {
    ~ambig Pat @specialize<varsym, "<-"> Infixexp |
    @specialize<varid, "let"> Decls |
    ~ambig Infixexp
}

// The list of statements.

Stmts {
    (Stmt)* Exp (";")? 
}

// Definition of statement. 

Stmt {
    Exp ";" |
    Pat @specialize<varsym, "<-"> Exp ";" |
    @specialize<varid, "let"> Decls ";" |
    ";"
}

fbind {
    qvar @specialize<varsym, "="> Exp
}

// Definition of pattern.

Pat {
    Lpat qconop Pat |
    Lpat
}

Lpat {
    Apat |
    "-" (integer | float) |
    gcon "{}" |
    gcon "{" Apat ("," Apat)* "}" 

}

Apat {
    var (@specialize<varsym, "@"> Apat )? |
    gcon |
    qcon !highprec "{}" |
    qcon !highprec "{" Fpat ("," Fpat)* "}"
    literal |
    @specialize<varid, "_"> |
    "(" Pat ")" |
    "(" Pat ("," Pat)+ ")" |
    "[" Pat ("," Pat)* "]" |
    @specialize<varsym, "~"> Apat  
}

Fpat {
    qvar @specialize<varsym, "="> Pat
}

// The block where declarations are listed.

Body {
    "{" Impdecls (~ambig ";" Topdecls)? "}" |
    "{" Topdecls "}"
}

// The list of exports.

Exports {
    "(" (",")? ")" |
    "(" Export ("," Export)* (",")? ")"   
}

// The export types.

Export {
    qvar |
    qtycls ("(" @specialize<varsym, ".."> ")" | "(" ")" | "(" cname ("," cname)* ")" )? |
    @specialize<varid, "module"> modid
}

// The list of top declarations.

Topdecls {
    Topdecl (";" Topdecl)*
}

// Top declaration types.

Topdecl {
    @specialize<varid, "type"> Simpletype @specialize<varsym, "="> Type |
    @specialize<varid, "data">  (context @specialize<varsym, "=>">)? Simpletype (@specialize<varsym, "="> constrs)? (deriving)? |
    @specialize<varid, "newtype"> (context @specialize<varsym, "=>">)? Simpletype @specialize<varsym, "="> newconstr (deriving)? |
    @specialize<varid, "class"> (scontext @specialize<varsym, "=>">)? tycls tyvar (@specialize<varid, "where"> Cdecls)? |
    @specialize<varid, "instance"> (scontext @specialize<varsym, "=>">)? qtycls inst (@specialize<varid, "where"> Idecls)? |
    @specialize<varid, "default">  "(" ")" |
    @specialize<varid, "default"> "(" Type ("," Type)* ")" |
    @specialize<varid, "foreign"> Fdecl |
    Decl
}

// The list of declarations.

Decls {
    "{" Decl (";" Decl)* "}"
}

// Definition of a declaration.

Decl {
    Gendecl |
    (funlhs | Pat) rhs
}

// The list of class declarations.

Cdecls {
    "{" Cdecl (";" Cdecl)* "}"
}

// Definition of a class declaration.

Cdecl {
    Gendecl |
    (funlhs | var) rhs
}

// The list of instance declarations.

Idecls {
    "{" Idecl (";" Idecl)* "}"
}

// Definition of an instance declaration.

Idecl {
    (funlhs | var) rhs |
    ""
}

// Definition of a general declaration: type signature or fixity declaration.
//
// Examples:
//
//  a, b, c, :: Num x => x
//  infixr 5 ^, *, &
Gendecl {
    vars @specialize<varsym, "::"> (context @specialize<varsym, "=>">)? Type |
    fixity (integer)? ops |
    ""
}

// The list of operators.
//
// Example: +, -, *
ops {
    op ("," op)*
}

// The list of variables.
//
// Example: a, b, c
vars {
    var ("," var)*
}

// General function type syntax.

Type {
    Btype (!highprec @specialize<varsym, "->"> Type)?
}

// Type application.

Btype {
    (Btype)? Atype
}

// Application types.

Atype {
    gtycon |
    tyvar |
    "(" Type ("," Type)+ ")" | 
    "[" Type "]" |
    "(" Type ")" 
}

gtycon { 
    gtycontok |
    qtycon
}

gcon { 
    qcon |
    gcontok
}

// Definition of a context. should be a class or a list of classes.

context {
    class |
    "("  ")" |
    "(" class ("," class)* ")"
}

class {
     qtycls tyvar |
     qtycls "(" tyvar Atype (Atype)* ")"
}

Simpletype {
    tycon |
    tycon (tyvar)+
}

// The list of constructor applications.

constrs {
    constr (@specialize<varsym, "|"> constr)*
}

// Definition of constructor application.

constr {
    con (("!")? Atype)* |
    (Btype | "!" Atype) conop (Btype | "!" Atype) |
    con "{" "}" |
    con "{" Fielddecl ("," Fielddecl)* "}"
}

Fielddecl {
    vars @specialize<varsym, "::"> (Type | "!" Atype)
}

deriving {
    @specialize<varid, "deriving"> (dclass | dclasses)
}

dclasses {
    "(" ")" |
    "(" dclass ("," dclass)* ")"
}

dclass {
    qtycls
}

newconstr {
    con Atype |
    con "{" var @specialize<varsym, "::"> Type "}"
}

scontext {
    simpleclass |
    "(" ")" |
    "(" simpleclass ("," simpleclass)* ")"
}

simpleclass {
    qtycls tyvar
}

inst {
    gtycon |
    "(" gtycon ")" |
    "("gtycon (tyvar)* ")" |
    "(" tyvar ("," tyvar)+ ")" |
    "[" tyvar "]" |
    "(" tyvar @specialize<varsym, "->"> tyvar ")"
}

funlhs {
    var Apat "{" Apat "}" |
    Pat varop Pat |
    "(" funlhs ")" Apat "{" Apat "}"
}

rhs {
    @specialize<varsym, "="> Exp ( @specialize<varid, "where"> Decls)? |
    gdrhs ( @specialize<varid, "where"> Decls )?
}

gdrhs {
    guards @specialize<varsym, "="> Exp ( gdrhs )?
}

// The list of import declarations.

Impdecls {
    Impdecl (~ambig ";" Impdecl)*
}

// Definition of import declaration.

Impdecl {
    @specialize<varid, "import">  (@extend<varid, "qualified">)? modid (@extend<varid, "as"> modid)? (impspec)? 
}

impspec {
    "(" ")" |
    "(" import ("," import)* (",")? ")" |
    @extend<varid, "hiding"> "(" ")" |
    @extend<varid, "hiding"> "(" import ("," import)* (",")? ")"
}

import {
    var |
    tycon ("(..)" | "(" ")" | "(" cname ("," cname)* ")")?
}

cname {
    var |
    con
}

// Definition of foreign delcaration.

Fdecl {
    @specialize<varid, "import"> callconv (safety)? impent var @specialize<varsym, "::"> Ftype |
    "export" callconv expent var @specialize<varsym, "::"> Ftype
}

impent {
    (string)? 

}

expent {
    (string)?
}

Ftype {
    Frtype |
    qtycon (Atype)* @specialize<varsym, "->"> Ftype
}

Frtype {
    qtycon (Atype)* |
    "()"
}

fixity {@specialize<varid,"infixl"> | @specialize<varid, "infixr"> | @specialize<varid, "infix">}

safety { @extend<varid, "safe"> | @extend<varid, "unsafe">}

callconv { @extend<varid, "ccall"> | @extend<varid,"stdcall"> | @extend<varid, "cplusplus"> | @extend<varid, "jvm"> | @extend<varid, "dotnet">}


@tokens {
    special {"(" | ")" | "," | ";" | "[" | "]" | "`" | "{" | "}"}
    return {"\r"}
    linefeed {"\n"}
    formfeed {"\f"}
    vertab {"\v"}
    space {" "}
    tab {"\t"}
    uniWhite {std.whitespace}
    dashes {"--" ("-")*}
    opencom {"{-"}
    closecom {"-}"}
    quot {"\"" | "\'" } 
    ascSmall {std.asciiLowercase}
    underline {"_"}
    ascLarge {std.asciiUppercase}
    ascSymbol {"!" | "#" | "$" | "%" | "&" | "⋆" | "+" | "." | "/" |
                "<" | "=" | ">" | "?" | "@" | "\\" | "^" | "|" | "-" |
                "~" | ":"}
    digit {ascDigit }
    ascDigit {std.digit}
    octit {$[0-7]}  
    hexit {digit | $[A-F] | $[a-f]}
    charesc {"a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\"" | "\'" | "&"}
    ascii {"^" cntrl | "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | 
    "ACK" |	"BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" |
    "SI" | "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" | 
    "CAN"| "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "SP" | "DEL"}
    cntrl {ascLarge | "@" | "[" | "]" | "\\" | "^" | "_"}
    gcontok {"()" | "[]" | "(," (",")* ")" }
    gtycontok {"()" | "[]" | "(->)" | "(," (",")* ")" }
    decimal {(digit)+}
    varid { small (small | large | digit | "\'")* }
    small { ascSmall | underline}
    large { ascLarge }
    varsym { (symbol)+ }
    consym { ":" (symbol)+ }
    symbol { ascSymbol }
    any { graphic | space | tab }
    graphic { small | large | symbol | digit | special | quot }
    conid { large (small | large | digit | "\'")* }
    }

