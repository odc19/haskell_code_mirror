//TODO: Unicode support

@precedence {
    modid, 
    conid, ascLarge,
    varid, small,
    varsym, symbol,
    float, integer,
    nl @cut,
    record, 
    decl,
    patternGuard,
    typeA
}

@top Module{
    @specialize<varid, "module"> ModuleName (Exports)? @specialize<varid, "where"> Body |
    Body
}

ModuleName {
    modid
}

@skip {
    whitechar | comment | ncomment
}

literal {
    !integer integer |
    !float float |
    char|
    string
}


whitechar {
    newline |
    vertab |
    space |
    tab |
    uniWhite
}

newline {
    !nl return linefeed |
    return |
    linefeed |
    formfeed
}



comment {
    dashes (any (any)*)? newline
}

ncomment {
    opencom anyseq (ncomment anyseq)* closecom
}

anyseq {
    (graphic | whitechar)*
}

any {
    graphic |
    space |
    tab
}

graphic {
    small |
    large |
    symbol |
    digit |
    special |
    quot
}

conid {
    !conid large (small | large | digit | "\'")*
}

tyvar {
    varid
}

tycon {
    conid
}

tycls {
    conid
}

modid {
    !modid (conid ".")* conid
}

qvarid {
    (modid ".")? varid
}

qconid {
    (modid ".")? conid
}

qtycon {
    (modid ".")? tycon
}

qtycls {
    (modid ".")? tycls
}

qvarsym {
    (modid ".")? varsym
}

qconsym {
    (modid ".")? consym
}

octal {
    octit (octit)*
}

hexadecimal {
    hexit (hexit)*
}

integer {
    !integer decimal | "0o" octal | "0O" octal | "0x" hexadecimal | "0X" hexadecimal 
}

float {
    !float decimal "." decimal (exponent)?
}

exponent {
    ("e" | "E") ("+" | "-")? decimal
}

char {
    "\'" (graphic | space | escape) "\'" 
}

string {
    "\"" (graphic | space | escape | gap) "\"" 
}

escape {
    "\\" (charesc | ascii | decimal | "o" octal | "x" hexadecimal)
}

gap {
    "\\" whitechar (whitechar)* "\\"
}

Exp {
    Infixexp "::" (context "=>")? Type |
    Infixexp !typeA
}

Infixexp {
    Lexp qop Infixexp |
    "-" Infixexp |
    Lexp|
    Exp qop Exp
}

Lexp {
    "\\" (Apat)+ "->" Exp |
    @specialize<varid, "let"> Decls @specialize<varid, "in"> Exp |
    @specialize<varid, "if"> Exp (";")? @specialize<varid, "then"> Exp (";")? @specialize<varid, "else"> Exp |
    @specialize<varid, "case"> Exp @specialize<varid, "of"> "{" Alts "}" |
    @specialize<varid, "do"> "{" Stmts "}" |
    Fexp
}

Fexp {
    (Fexp)? Aexp
}

Aexp {
    qvar |
    gcon |
    literal |
    "(" Exp ")" |
    "(" Exp ("," Exp)+ ")" |
    "[" Exp ("," Exp)? ".." (Exp)? "]" |
    "[" Exp "|" qual ("," qual)+ "]" |
    "(" Infixexp qop")" |
    qcon "{}" |
    qcon "{" fbind ("," fbind)* "}" |
    Aexp "{" fbind ("," fbind)* "}"
}

var {
    varid | "(" varsym ")"
}

qvar {
    qvarid | "(" qvarsym ")"
}

con {
    conid | "(" consym ")"
}

qcon {
    qconid | "(" gconsym ")"
}

varop {
    varsym | "`" varid "`"
}

qvarop {
    qvarsym | "`" qvarid "`"
}

conop {
    consym | "`" conid "`"
}

qconop {
    gconsym | !decl "`" qconid "`"
}

op {
    varop | conop
}

qop {
    qvarop | qconop
}

gconsym {
    ":" | qconsym 
}

qual {
    Pat "<-" Exp |
    @specialize<varid, "let"> Decls |
    Exp
}

Alts {
    Alt (";" Alt)*
}

Alt {
    Pat "->" Exp "[where" Decls "]" |
    Pat Gdpat "[where" Decls "]" |
    ""
}

Gdpat {
    guards "->" Exp "[" Gdpat "]"
}

guards {
    "|" guard ("," guard)*
}

guard {
    ~ambig Pat "<-" Infixexp |
    @specialize<varid, "let"> Decls |
    ~ambig Infixexp
}

Stmts {
    (Stmt)* Exp (";")? 
}

Stmt {
    Exp ";" |
    Pat "<-" Exp ";" |
    @specialize<varid, "let"> Decls ";" |
    ";"
}

fbind {
    qvar "=" Exp
}

Pat {
    Lpat qconop Pat |
    Lpat
}

Lpat {
    Apat |
    "-" (integer | float) |
    gcon "{}" |
    gcon "{" Apat ("," Apat)* "}" 

}

Apat {
    var ("@" Apat )? |
    gcon |
    qcon !record "{}" |
    qcon !record "{" Fpat ("," Fpat)* "}"
    literal |
    @specialize<varid, "_"> |
    "(" Pat ")" |
    "(" Pat ("," Pat)+ ")" |
    "[" Pat ("," Pat)* "]" |
    "~" Apat  
}

Fpat {
    qvar "=" Pat
}


Body {
    "{" Impdecls (~ambig ";" Topdecls)? "}" |
    "{" Topdecls "}"
}

Exports {
    "(" (",")? ")" |
    "(" Export ("," Export)* (",")? ")"   
}

Export {
    qvar |
    qtycon ("(" ".." ")" | "(" ")")? |
    qtycon ("(" ".." ")" | "(" cname ("," cname)* ")" )? |
    qtycls ("(" ".." ")" | "(" ")")? |
    qtycls ("(" ".." ")" | "(" var ("," var)* ")" )? |
    @specialize<varid, "module"> modid
}

Topdecls {
    Topdecl (";" Topdecl)*
}

Topdecl {
    @specialize<varid, "type"> Simpletype "=" Type |
    @specialize<varid, "data">  (context "=>")? Simpletype ("=" constrs)? (deriving)? |
    @specialize<varid, "newtype"> (context "=>")? Simpletype "=" newconstr (deriving)? |
    @specialize<varid, "class"> (scontext "=>")? tycls tyvar (@specialize<varid, "where"> Cdecls)? |
    @specialize<varid, "instance"> (scontext "=>")? qtycls inst (@specialize<varid, "where"> Idecls)? |
    @specialize<varid, "default">  "(" ")" |
    @specialize<varid, "default"> "(" Type ("," Type)* ")" |
    @specialize<varid, "foreign"> Fdecl |
    Decl
}

Decls {
    "{" Decl (";" Decl)* "}"
}

Decl {
    Gendecl |
    (funlhs | Pat) rhs
}

Cdecls {
    "{" Cdecl (";" Cdecl)* "}"
}

Cdecl {
    Gendecl |
    (funlhs | var) rhs
}

Idecls {
    "{" Idecl (";" Idecl)* "}"
}

Idecl {
    (funlhs | var) rhs |
    ""
}

Gendecl {
    vars "::" (context "=>")? Type |
    fixity (integer)? ops |
    ""
}

ops {
    op ("," op)*
}

vars {
    var ("," var)*
}

Type {
    Btype ("->" Type)?
}

Btype {
    (Btype)? Atype
}

 Atype {
    gtycon |
    tyvar |
    "(" Type ("," Type)+ ")" | 
    "[" Type "]" |
    "(" Type ")" 
 } 

 gtycon { 
    gtycontok |
    qtycon
    }

gcon { 
    qcon |
    gcontok
    }

 context {
     class |
     "("  ")" |
     "(" class ("," class)* ")"
 }

 class {
     qtycls tyvar |
     qtycls "(" tyvar Atype (Atype)* ")"
 }

Simpletype {
    tycon |
    tycon tyvar (tyvar)*
}

constrs {
    constr ("|" constr)*
}

constr {
    con (("!")? Atype)* |
    (Btype | "!" Atype) conop (Btype | "!" Atype) |
    con "{" "}" |
    con "{" Fielddecl ("," Fielddecl)* "}"
}

Fielddecl {
    vars "::" (Type | "!" Atype)
}

deriving {
    @specialize<varid, "deriving"> (dclass | dclasses)
}

dclasses {
    "(" ")" |
    "(" dclass ("," dclass)* ")"
}

dclass {
    qtycls
}

newconstr {
    con Atype |
    con "{" var "::" Type "}"
}

scontext {
    simpleclass |
    "(" ")" |
    "(" simpleclass ("," simpleclass)* ")"
}

simpleclass {
    qtycls tyvar
}

inst {
    gtycon |
    "(" gtycon ")" |
    "("gtycon (tyvar)* ")" |
    "(" tyvar ("," tyvar)+ ")" |
    "[" tyvar "]" |
    "(" tyvar "->" tyvar ")"
}

funlhs {
    var Apat "{" Apat "}" |
    Pat varop Pat |
    "(" funlhs ")" Apat "{" Apat "}"
}

rhs {
    "=" Exp ( @specialize<varid, "where"> Decls)? |
    gdrhs ( @specialize<varid, "where"> Decls )?
}

gdrhs {
    guards "=" Exp ( gdrhs )?
}

Impdecls {
    Impdecl (~ambig ";" Impdecl)*
}

Impdecl {
    @specialize<varid, "import">  (@extend<varid, "qualified">)? modid (@extend<varid, "as"> modid)? (impspec)? 
}

impspec {
    "(" ")" |
    "(" import ("," import)* (",")? ")" |
    @extend<varid, "hiding"> "(" ")" |
    @extend<varid, "hiding"> "(" import ("," import)* (",")? ")"
}

import {
    var |
    tycon "[" "(..)" "|" "(" ")" "]" |
    tycon "[" "(..)" "|" "(" cname ("," cname)* ")" "]" |
    tycls "[" "(..)" "|" "(" ")" "]" |
    tycls "[" "(..)" "|" "(" var ("," var)* ")" "]"
}

cname {
    var |
    con
}

Fdecl {
    @specialize<varid, "import"> callconv (safety)? impent var "::" Ftype |
    "export" callconv expent var "::" Ftype
}

impent {
    (string)? 

}

expent {
    (string)?
}

Ftype {
    Frtype |
    qtycon (Atype)* "->" Ftype
}

Frtype {
    qtycon (Atype)* |
    "()"
}

fixity {@specialize<varid,"infixl"> | @specialize<varid, "infixr"> | @specialize<varid, "infix">}

safety { @extend<varid, "safe"> | @extend<varid, "unsafe">}

callconv { @extend<varid, "ccall"> | @extend<varid,"stdcall"> | @extend<varid, "cplusplus"> | @extend<varid, "jvm"> | @extend<varid, "dotnet">}


@tokens {
    special {"(" | ")" | "," | ";" | "[" | "]" | "`" | "{" | "}"}
    return {"\r"}
    linefeed {"\n"}
    formfeed {"\f"}
    vertab {"\v"}
    space {" "}
    tab {"\t"}
    uniWhite {std.whitespace}
    dashes {"--" ("-")*}
    opencom {"{-"}
    closecom {"-}"}
    quot {"\"" | "\'" } 
    ascSmall {std.asciiLowercase}
    underline {"_"}
    ascLarge {std.asciiUppercase}
    ascSymbol {"!" | "#" | "$" | "%" | "&" | "â‹†" | "+" | "." | "/" |
                "<" | "=" | ">" | "?" | "@" | "\\" | "^" | "|" | "-" |
                "~" | ":"}
    digit {ascDigit }
    ascDigit {std.digit}
    octit {$[0-7]}  
    hexit {digit | $[A-F] | $[a-f]}
    charesc {"a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\"" | "\'" | "&"}
    ascii {"^" cntrl | "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | 
    "ACK" |	"BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" |
    "SI" | "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" | 
    "CAN"| "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "SP" | "DEL"}
    cntrl {ascLarge | "@" | "[" | "]" | "\\" | "^" | "_"}
    gcontok {"()" | "[]" | "(," (",")* ")" }
    gtycontok {"()" | "[]" | "(->)" | "(," (",")* ")" }
    decimal {(digit)+}
    varid { small (small | large | digit | "\'")* }
    small { ascSmall | underline}
    large { ascLarge }
    varsym { (symbol)+}
    consym { ":" (symbol)+}
    symbol { ascSymbol }
    }

