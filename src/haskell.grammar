//TODO: Unicode support 

@precedence {
    float, integer,
    highprec
}

@top Module{
    @specialize<varid, "module"> ModuleName (Exports)? @specialize<varid, "where"> Body |
    Body
}

ModuleName {
    Modid
}

//The characters and sets of characters to be ignored when matching the grammar.

@skip {
    whitechar | Comment | Ncomment
}

// The most basic data types. (to be modified).
// Examples:
//
// integer: 321, -2342, 31298389
// float: 1321.332, 23245.298, -452.9
// char: 'a', 'F', '!'
// string: "asdfghjkl"

literal {
    !integer integer |
    !float float |
    char|
    string
}



// The syntax for a block of comment lines.
// You should be allowed to have a comment block inside another comment block.
// Examples:
//
// {-
// This is a block
// of commented lines.
// -}
//
// {-
//      Outer comment block
// {- 
//     Inner comment block
// -}
// -}




Modid {
    !highprec (conid @extend<varsym, ".">)* conid
}

qvarid {
    (Modid @extend<varsym, ".">)? varid ~vari
}

qconid {
    (Modid @extend<varsym, ".">)? conid ~context
}

qvarsym {
    (Modid @extend<varsym, ".">)? !highprec varsym
}

qconsym {
    (Modid @extend<varsym, ".">)? !highprec consym
}

@skip {} {

    Ncomment {
    opencom anyseq (Ncomment anyseq)* closecom
    }

    // The characters which should be allowed in the comment block
    
    anyseq {
    (graphic | whitechar)*
    }

    // The syntax for a comment line
    // Example:
    //
    // //This is a comment line.

    Comment {
    dashes (any)* newline
    }
}



// The general syntax for expressions. Type signature might be included. 
// Example:
//
// f x y :: Int

Exp {
    infixexp (!highprec @specialize<varsym, "::"> (Context @specialize<varsym, "=>">)? Type)?
}

// Infix operators application for expressions.
// Examples:
//
// - f x + y
// a `concatPrint` b

infixexp {
    lexp qop infixexp |
    @extend<varsym, "-"> infixexp |
    lexp
}

// Lambda abstraction and expressions introduced by keywords.
// Examples:
//
// \ x -> x + 1
// let x = 10 in x + y 
// if e1 then e2 else e3
//
// case xs of [] -> "empty."  
//            [x] -> "a singleton list."  
//            xs -> "a list with many elements." 
//
// do l <- getLine  
//    return (words l)

lexp {
    @specialize<varsym, "\\"> (apat)+ @specialize<varsym, "->"> Exp |
    @specialize<varid, "let"> Decls @specialize<varid, "in"> Exp |
    @specialize<varid, "if"> Exp (";")? @specialize<varid, "then"> Exp (";")? @specialize<varid, "else"> Exp |
    @specialize<varid, "case"> Exp @specialize<varid, "of"> "{" Alts "}" |
    @specialize<varid, "do"> "{" Stmts "}" |
    fexp
}

// Function application for expressions.

fexp {
    (fexp)? aexp
}

// Expressions aplications, such as: sections, lists, tuples, sequences etc.
// Examples:
//
// (e1, e2, e3)
// [e1, e2, e3]
// [e1, e2 ..]
// [e1, e2 .. e3]
// (e1 op)
// (op e1)
// C2 {f1 :: Int,  f3,f4 :: Char}

aexp {
    qvar |
    gcon ~gcon |
    literal |
    "(" Exp ")" |
    "(" Exp ("," Exp)+ ")" |
    "[" Exp ("," Exp)? @specialize<varsym, ".."> (Exp)? "]" |
    "[" Exp @specialize<varsym, "|"> qual ("," qual)+ "]" |
    "(" infixexp qop ")" |
    "("qop infixexp ")" |
    qcon ~qcon "{}" |
    qcon ~qcon "{" fbind ("," fbind)* "}" |
    aexp "{" fbind ("," fbind)* "}"
} 

var {
    varid ~vari | "(" varsym ")"
}

qvar {
    qvarid | "(" qvarsym ")"
}

con {
    conid ~context | "(" consym ")"
}

qcon {
    qconid | "(" gconsym ")"
}

varop {
    varsym | "`" varid "`"
}

qvarop {
    qvarsym | "`" qvarid "`"
}

conop {
    consym | "`" conid "`"
}

qconop {
    gconsym | !highprec "`" qconid "`"
}

op {
    varop | conop
}

qop {
    qvarop | qconop
}

gconsym {
    !highprec @specialize<varsym, ":"> | qconsym 
}

// Qualifiers could be either generators, local bindings or boolean guards.
//Examples:
//
// x <- x % 2 == 0
// let x = 2, y = 3


qual {
    Pat @specialize<varsym, "<-"> Exp |
    @specialize<varid, "let"> Decls |
    Exp
}

// List of alternative pattern matches.
// Example:
// 
// alt1; alt2; ... ; altn

Alts {
    Alt (";" Alt)*
}

// Definition of a pattern match.
// Examples:
//
// pat -> exp
// pat | guard1, guard2, ... , guardn

Alt {
    Pat @specialize<varsym, "->"> Exp (@specialize<varid,"where"> Decls)? |
    Pat Gdpat (@specialize<varid, "where"> Decls)? |
    ""
}

Gdpat {
    guards @specialize<varsym, "->"> Exp Gdpat?
}

// The list of guards.
// Example:
//
// | guard1, guard2, ... , guardn

guards {
    @specialize<varsym, "|"> guard ("," guard)*
}

// Definition of a guard. Could be a pattern guard, a local binding or
// a boolean guard.
// Examples:
//
// []  <- "Empty string"
// [x] <- "Singleton list"
// xs  <- "Many elements list"
// let parity = x `mod` 2, parity == 0 = "even"

guard {
    ~ambig Pat @specialize<varsym, "<-"> infixexp |
    @specialize<varid, "let"> Decls |
    ~ambig infixexp
}

// The list of statements.

Stmts {
    (Stmt)* Exp (";")? 
}

// Definition of statement. 

Stmt {
    Exp ";" |
    Pat @specialize<varsym, "<-"> Exp ";" |
    @specialize<varid, "let"> Decls ";" |
    ";"
}

fbind {
    qvar @specialize<varsym, "="> Exp
}

// Definition of pattern.

Pat {
    lpat qconop Pat |
    lpat
}

lpat {
    apat |
    @extend<varsym, "-"> (integer | float) |
    gcon ~gcon "{}" |
    gcon ~gcon "{" apat ("," apat)* "}" 

}

apat {
    var (@specialize<varsym, "@"> apat )? |
    gcon ~gcon |
    qcon !highprec "{}" |
    qcon !highprec "{" Fpat ("," Fpat)* "}"
    literal |
    @specialize<varid, "_"> |
    "(" Pat ")" |
    "(" Pat ("," Pat)+ ")" |
    "[" Pat ("," Pat)* "]" |
    @specialize<varsym, "~"> apat  
}

Fpat {
    qvar @specialize<varsym, "="> Pat
}

// The block where declarations are listed.

Body {
    "{" Impdecls (~ambig ";" Topdecls)? "}" |
    "{" Topdecls "}"
}

// The list of exports.

Exports {
    "(" (",")? ")" |
    "(" Export ("," Export)* (",")? ")"   
}

// The export types.

Export {
    qvar |
    qconid ("(" @specialize<varsym, ".."> ")" | "(" ")" | "(" cname ("," cname)* ")" )? |
    @specialize<varid, "module"> Modid
}

// The list of top declarations.

Topdecls {
    Topdecl (";" Topdecl)*
}

// Top declaration types.

Topdecl {
    @specialize<varid, "type"> Simpletype @specialize<varsym, "="> Type |
    @specialize<varid, "data">  (Context @specialize<varsym, "=>">)? Simpletype (@specialize<varsym, "="> constrs)? (deriving)? |
    @specialize<varid, "newtype"> (Context @specialize<varsym, "=>">)? Simpletype @specialize<varsym, "="> newconstr (deriving)? |
    @specialize<varid, "class"> ( Context @specialize<varsym, "=>">)? conid ~context varid (@specialize<varid, "where"> Cdecls)? |
    @specialize<varid, "instance"> (Context @specialize<varsym, "=>">)? qconid inst (@specialize<varid, "where"> Idecls)? |
    @specialize<varid, "default">  "(" ")" |
    @specialize<varid, "default"> "(" Type ("," Type)* ")" |
    @specialize<varid, "foreign"> Fdecl |
    Decl
}

// The list of declarations.

Decls {
    "{" Decl (";" Decl)* "}"
}

// Definition of a declaration.

Decl {
    Gendecl |
    (funlhs | Pat) rhs
}

// The list of class declarations.

Cdecls {
    "{" Cdecl (";" Cdecl)* "}"
}

// Definition of a class declaration.

Cdecl {
    Gendecl |
    (funlhs | var) rhs
}

// The list of instance declarations.

Idecls {
    "{" Idecl (";" Idecl)* "}"
}

// Definition of an instance declaration.

Idecl {
    (funlhs | var) rhs |
    ""
}

// Definition of a general declaration: type signature or fixity declaration.
//
// Examples:
//
//  a, b, c, :: Num x => x
//  infixr 5 ^, *, &

Gendecl {
    vars @specialize<varsym, "::"> (Context @specialize<varsym, "=>">)? Type |
    fixity (integer)? ops |
    ""
}

// The list of operators.
//
// Example: +, -, *

ops {
    op ("," op)*
}

// The list of variables.
//
// Example: a, b, c


vars {
    var ("," var)*
}

// General function type syntax.

Type {
    Btype (!highprec @specialize<varsym, "->"> Type)?
}

// Type application.

Btype {
    (Btype)? Atype
}

// Application types.

Atype {
    gtycon |
    varid |
    "(" Type ("," Type)+ ")" | 
    "[" Type "]" |
    "(" Type ")" 
}

gtycon { 
    ~context gtycontok |
    qconid ~context
}

gcon { 
    qcon ~qcon |
    gcontok
}

// Definition of a context. should be a class or a list of classes.

Context {
    Type 
}

Simpletype {
    conid |
    conid ~context (varid)+
}

// The list of constructor applications.

constrs {
    constr (@specialize<varsym, "|"> constr)*
}

// Definition of constructor application.

constr {
    con ((@extend<varsym, "!">)? Atype)* |
    (Btype | @extend<varsym, "!"> Atype) conop (Btype | @extend<varsym, "!"> Atype) |
    con "{" "}" |
    con "{" Fielddecl ("," Fielddecl)* "}"
}

Fielddecl {
    vars @specialize<varsym, "::"> (Type | @extend<varsym, "!"> Atype)
}

deriving {
    @specialize<varid, "deriving"> (dclass | dclasses)
}

dclasses {
    "(" ")" |
    "(" dclass ("," dclass)* ")"
}

dclass {
    qconid
}

newconstr {
    con Atype |
    con "{" var @specialize<varsym, "::"> Type "}"
}

inst {
    gtycon |
    ~context "(" gtycon ")" |
    "("gtycon (varid)* ")" |
    "(" varid ("," varid)+ ")" |
    ~context "[" varid "]" |
    "(" varid @specialize<varsym, "->"> varid ")"
}

funlhs {
    var apat "{" apat "}" |
    Pat varop Pat |
    "(" funlhs ")" apat "{" apat "}"
}

rhs {
    @specialize<varsym, "="> Exp ( @specialize<varid, "where"> Decls)? |
    gdrhs ( @specialize<varid, "where"> Decls )?
}

gdrhs {
    guards @specialize<varsym, "="> Exp ( gdrhs )?
}

// The list of import declarations.

Impdecls {
    Impdecl (~ambig ";" Impdecl)*
}

// Definition of import declaration.

Impdecl {
    @specialize<varid, "import">  (@extend<varid, "qualified">)? Modid (@extend<varid, "as"> Modid)? (impspec)? 
}

impspec {
    "(" ")" |
    "(" import ("," import)* (",")? ")" |
    @extend<varid, "hiding"> "(" ")" |
    @extend<varid, "hiding"> "(" import ("," import)* (",")? ")"
}

import {
    var |
    conid ("(..)" | "(" ")" | "(" cname ("," cname)* ")")?
}

cname {
    var |
    con
}

// Definition of foreign delcaration.

Fdecl {
    @specialize<varid, "import"> callconv (safety)? impent var @specialize<varsym, "::"> Ftype |
    @specialize<varid, "export"> callconv expent var @specialize<varsym, "::"> Ftype
}

impent {
    (string)? 

}

expent {
    (string)?
}

Ftype {
    frtype |
    qconid (Atype)* @specialize<varsym, "->"> Ftype
}

frtype {
    qconid (Atype)* |
    "()"
}

fixity {@specialize<varid,"infixl"> | @specialize<varid, "infixr"> | @specialize<varid, "infix">}

safety { @extend<varid, "safe"> | @extend<varid, "unsafe">}

callconv { @extend<varid, "ccall"> | @extend<varid,"stdcall"> | @extend<varid, "cplusplus"> | @extend<varid, "jvm"> | @extend<varid, "dotnet">}


@tokens {
    special {"(" | ")" | "," | ";" | "[" | "]" | "`" | "{" | "}"}
    return {"\r"}
    linefeed {"\n"}
    formfeed {"\f"}
    vertab {"\x0b"}
    space {" "}
    tab {"\t"}
    uniWhite {std.whitespace}
    dashes {"--" ("-")*}
    opencom {"{-"}
    closecom {"-}"}
    quot {"\"" | "\'" } 
    underline {"_"}
    ascSymbol {"!" | "#" | "$" | "%" | "&" | "⋆" | "+" | "." | "/" |
                "<" | "=" | ">" | "?" | "@" | "\\" | "^" | "|" | "-" |
                "~" | ":"}
    // Just like ascSymbol, but without backslash which must be escaped in strings.
    ascStrSymbol {"!" | "#" | "$" | "%" | "&" | "⋆" | "+" | "." | "/" |
                  "<" | "=" | ">" | "?" | "@" | "^" | "|" | "-" |
                  "~" | ":"}
    // Just like ascSymbol, but without colon which introduces a constructor.
    ascVarSymbol {"!" | "#" | "$" | "%" | "&" | "⋆" | "+" | "." | "/" |
                  "<" | "=" | ">" | "?" | "@" | "\\" | "^" | "|" | "-" |
                  "~"}
      digit {std.digit}
    octit {$[0-7]}  
    hexit {digit | $[A-F] | $[a-f]}
    charesc {"a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\"" | "\'" | "&"}
    ascii {"^" cntrl | "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | 
    "ACK" |	"BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" |
    "SI" | "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" | 
    "CAN"| "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "SP" | "DEL"}
    cntrl {large | "@" | "[" | "]" | "\\" | "^" | "_"}
    gcontok {"()" | "[]" | "(," (",")* ")" }
    gtycontok {"()" | "[]" | "(->)" | "(," (",")* ")" }
    decimal {(digit)+}
    varid { small (small | large | digit | "\'")* }
    small { std.asciiLowercase | underline}
    large { std.asciiUppercase }
    varsym { (varSymbol)+ }
    consym { ":" (symbol)+ }
    symbol { ascSymbol }
    strSymbol { ascStrSymbol }
    varSymbol { ascVarSymbol }
    any { graphic | space | tab }
    graphic { small | large | symbol | digit | special | quot }
    strGraphic { small | large | strSymbol | digit | special | quot }
    conid { large (small | large | digit | "\'")* }
    whitechar { newline | vertab | space | tab | uniWhite }
    newline { return linefeed | return | linefeed | formfeed }
    octal {(octit)+ }
    hexadecimal { (hexit)+ }

    string { "\"" (strGraphic | space | escape | gap) "\""}
    char { "\'" (strGraphic | space | escape) "\'" }
    escape { "\\" (charesc | ascii | decimal | "o" octal | "x" hexadecimal)}
    gap { "\\" (whitechar)+ "\\" }
    integer { decimal | "0o" octal | "0O" octal | "0x" hexadecimal | "0X" hexadecimal }
    float { decimal "." decimal (exponent)? }
    exponent { ("e" | "E") ("+" | "-")? decimal }

    @precedence { dashes, varsym }
    @precedence { float, integer }
}
