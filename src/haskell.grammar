@top Program {
    (lexeme | whitespace)*
}


lexeme {
    qvarid |
    qconid | 
    qvarsym | 
    qconsym |
    literal | 
    special | 
    reservedop | 
    reservedid
}

literal {
    integer |
    float |
    char|
    string
}



whitespace {
    whitestuff whitestuff*
}

whitestuff {
    whitechar |
    comment |
    ncomment
}

whitechar {
    newline |
    vertab |
    space |
    tab |
    uniWhite
}

newline {
    return linefeed |
    return |
    linefeed |
    formfeed
}



comment {
    "TODO"
}

anyseq {"TODO"}

any {
    graphic |
    space |
    tab
}

graphic {
    small |
    large |
    symbol |
    digit |
    special |
    quot
}



small {
    ascSmall |
    uniSmall |
    underline
}



large {
    ascLarge |
    uniLarge
}

symbol {
    ascSymbol |
    "uniSymbol TODO"
}

digit {
    ascDigit |
    uniDigit
}


varid {
    small (small | large | digit | "\'")* "WITHOUT reversedid"
}

conid {
    large (small | large | digit | "\'")*
}

reservedid {
    case | class | data | default | deriving | do | else |
    foreign | if | import | in | infix | infixl |	
    infixr | instance | let | module | newtype | of |
    then | type | where | underline
}


tyvar {
    varid
}

tycon {
    conid
}

tycls {
    conid
}

modid {
    (conid ".") conid
}

qvarid {
    (modid ".")? varid
}

qconid {
    (modid ".")? conid
}

qtycon {
    (modid ".")? tycon
}

qtycls {
    (modid ".")? tycls
}

qvarsym {
    (modid ".")? varsym
}

qconsym {
    (modid ".")? consym
}


decimal {
    digit (digit)*
}

octal {
    octit (octit)*
}

hexadecimal {
    hexit (hexit)*
}

integer {
    decimal | "0o" octal | "0O" octal | "0x" hexadecimal | "0X" hexadecimal 
}

float {
    decimal "." decimal (exponent)?
}

exponent {
    ("e" | "E") ("+" | "-")? decimal
}

char {
    "\'" (graphic | space | escape) "\'" "TODO"
}

string {
    "\"" (graphic | space | escape) "\"" "TODO"
}

escape {
    "\" (charesc | ascii | decimal | "o" octal | "x" hexadecimal)
}

gap {
    "\" whitechar (whitechar)* "\"
}



exp {
    infixexp "::" (context "=>")? type |
    infixexp
}

infixexp {
    lexp qop infixexp |
    "-" infixexp |
    lexp|
    exp qop exp
}

lexp {
    "\" (apat)+ "->" exp |
    "let" decls "in" exp |
    "if" exp (";")? "then" exp (";")? "else" exp |
    "case" exp "of" "{" alts "}" |
    "do {" stmts "}" |
    fexp
}

fexp {
    (fexp)? aexp
}

aexp {
    qvar |
    gcon |
    literal |
    "(" exp ")" |
    "(" exp ("," exp)+ ")" |
    "[" exp ("," exp)? ".." (exp)? "]" |
    "[" exp "|" qual ("," qual)+ "]" |
    "(" infixexp qop")" |
    qcon "{}" |
    qcon "{" fbind ("," fbind)* "}" |
    aexp "{" fbind ("," fbind)* "}"
}

var {
    varid | "(" varsym ")"
}

qvar {
    qvarid | "(" qvarsym ")"
}

con {
    conid | "(" consym ")"
}

qcon {
    qconid | "(" gconsym ")"
}

varop {
    varsym | "`" varid "`"
}

qvarop {
    qvarsym | "`" qvarid "`"
}

conop {
    consym | "`" conid "`"
}

qconop {
    gconsym | "`" qconid "`"
}

op {
    varop | conop
}

qop {
    qvarop | qconop
}

gconsym {
    ":" | qconsym 
}





@tokens {
    special {"(" | ")" | "," | ";" | "[" | "]" | "`" | "{" | "}"}
    return {"\r"}
    linefeed {"\n"}
    formfeed {"\f"}
    vertab {"|"}
    space {" "}
    tab {"  "}
    uniWhite {std.whitespace}
    dashes {"--"("-")*}
    opecom {"{-"}
    closecom {"-}"}
    quot {"\"" | "\'"        "?????????????????"} 
    ascSmall {std.asciiLowercase}
    uniSmall {"TODO"}
    underline {"_"}
    ascLarge {std.asciiUppercase}
    uniLarge {"TODO"}
    ascSymbol {"!" | "#" | "$" | "%" | "&" | "â‹†" | "+" | "." | "/" |
                "<" | "=" | ">" | "?" | "@" | "\" | "^" | "|" | "-" |
                "~" | ":"}
    uniSymbol{"TODO"}
    ascDigit {std.digit}
    uniDigit {"TODO"}  
    octit {[0..7]}  
    hexit {digit | [A..F] | [a..f]}
    charesc {"a" | "b" | "f" | "n" | "r" | "t" | "v" | "\" | "\"" | "\'" | "&"}
    ascii {"^cntrl" | "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | 
    "ACK" |	"BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" |
    "SI" | "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" | 
    "CAN"| "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "SP" | "DEL"}
    cntrl {ascLarge | "@" | "[" | "]" | "\" | "^" | "_"}
    gcon { "()" | "[]" | "(," (",")* ")" | qcon}
    
    }

